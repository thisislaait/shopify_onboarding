1. Check if there is text in the search bar.
   a. If true, style the search bar:
      - Set background color to green.
      - Apply a border-radius of 8px.
      - Add 2px padding to the search bar.
      - invert icon color by 100%
   b. If false, remove the search icon background and restore search icon to original color.

2. Toggle visibility of the rotating circle when the search icon is clicked.
   a. Create a loading animation for the rotating circle:
      - Initialize a quarter circle and animate it to a full circle by increasing its size.
   b. Continuous loading animation:
      - Keep increasing the size of the circle as it searches for data.
   c. Completion animation:
      - When data is fully loaded, complete the circle and rotate it 360 degrees with a timeout of 1000ms.
   d. Focus border on the whole form:
      - While there's text in the input field, add a focus border of #32313C to the entire form.

3. Add press-down functionality to the search icon to indicate the initiation of a search.
   a. Visual indication of press state:
      - If the icon is pressed, modify its appearance to indicate the press state.
   b. Return to the original state when released:
      - If the icon is released, return the button to its original appearance.


1. Check if there is text in the search bar.
     a. If true, style the search bar:
        searchIcon.style.backgroundColor = '#7a0027';
        searchIcon.style.filter = 'invert(100%)';
      b. If false, remove the search icon background.
        searchIcon.style.backgroundColor = '';
        searchIcon.style.borderRadius = '';
        searchIcon.style.padding = '';


// TOGGLE functionality


Logic Breakdown:

1. **Get DOM Elements**:
   - Obtain references to HTML elements using `getElementById` for:
     - `alertIcon`
     - `alertMessage`
     - `profileContainer`
     - `profileDropdownMenu`

2. **Add Event Listener**:
   - Attach a click event listener to the `alertIcon` element to detect when it's clicked.

3. **Toggle Visibility**:
   - Use `classList.toggle` to toggle the 'hidden' class on the `alertMessage` element.
   - Check if the element was hidden or visible before the toggle.

4. **Styling Logic**:
   - If the element is visible (`!isHidden`):
     - Set the background color of `alertIcon` to a specific shade of red (`#7a0027`).
     - Apply a box shadow for emphasis.
   - If the element is hidden (`isHidden`):
     - Reset the background color of `alertIcon` to its default state.
     - Remove the box shadow.


3. Onboarding Toggle:

1. Toggle Entire Onboarding Steps:
   a. Clicking the toggleArrow initiates the toggle functionality.
   b. by default, the first accordion container is open.
      - Clicking the toggleArrow hides all accordion containers.
   c. If the accordion containers are closed:
      - Clicking the toggleArrow removes hidden on accordion containers.
   d. This behavior alternates between closing and showing the accordion containers with each click.

2. On toggleArrow Click:
   a. rotate toggleArrow 180 degrees when accordion is open
   b. Apply focus styles:
      - Add a box shadow of 0px 0px 0px 3px #005BD3, 0px 0px 0px 1px #000.


4. Function to Show Only Task1 Action:

a. On page load:
- Set hidden attribute to false for the first accordion with task1 class (task1 accordion).
- Set hidden attribute to true for all other accordions.

Styling Logic:

b. For each accordion item:
If accordion_task_action is visible (no hidden class):
- Set background color of accordion_container to #f3f3f3.
- Set font weight of item.title to 700.

c. If accordion_task_action is hidden:
Reset background color of accordion_container.
Reset font weight of item.title.

1. Function for Toggling Accordion Action on Click:

   Initialization:
   - On page load:
     - Attach a click event listener to each element with the class accordion_task.

   Toggle Functionality:
   - When an accordion_task is clicked:
     - Toggle the hidden class on its corresponding accordion_task_action.
     - Update styling based on the visibility of the accordion_task_action (as described in the previous logic).

   Styling Update:
   - After toggling visibility, trigger the styling update function to ensure the background color and font weight are applied correctly.

   Initial Styling on Page Load:
   - Call the styling update function on page load to ensure proper styling based on the default visibility of each accordion item.

2. Implementation Notes:
   - Make sure each accordion_task has a unique identifier or index to associate it with its corresponding accordion_task_action.
   - The hidden class is toggled on the accordion_task_action to control its visibility.
